.\" -*- coding: utf-8 -*-
.\" vim: ts=4 sw=4 tw=100 et ai si

.TH YOKOTOOL "1" "November 2016" "yoko-tool 2.0" "User Commands"


.SH NAME

yokotool - a tool to control the Yokogawa power meters.


.SH SYNOPSIS

.nf
yokotool [CONFIG|DEVNODE] [OPTIONS] [COMMAND [SUBCOMMAND] [OPTIONS] [ARGS]]
yokotool [COMMAND [SUBCOMMAND]] {-h }
.fi


.SH DESCRIPTION

Yokotool is a command-line tool for controlling Yokogawa power meters in Linux.

Today only the WT210 and WT310 power meters are supported, and only over the USB and Serial (RS-234)
communication interfaces. Most, but not all the possible power meter features are supported.

Many power yokotool commands correspond to the power meter feature and the user is supposed to
learn about them from the power meter users's guide.

The command-line interface is based on commands and sub-commands. Each command and sub-command
supports the \fB-h\fP option which can be used for quick help.

It is very convenient to create the \fByokotool.conf\fP configuration file and describe the power
meter type, the device node name and other parameters there.

This manual page is only a brief reference. Please, refer the Web-based documentation for more
details.

.SH OPTIONS

.B CONFIG
.RS
Name of the \fByokotool.conf\fP configuration file section to find the power meter details from
(device node name, baud rate, etc).
.RE

.B DEVNODE
.RS
The power meter device node (e.g., /dev/usbtmc0).
.RE

.B --pmtype TYPE
.RS
Type of the power meter. Use "wt310" for Yokogawa WT310, "wt210" for Yokogawa
WT210, and "wt332/wt333" for Yokogawa WT33x.
.RE

.B --baudrate RATE
.RS
In case of the serial communication interface, the baud rate to use (e.g., 19200).
.RE

.B {-o | --outfile} OUTFILE
.RS
Redirect output to 'OUTFILE' instead of the terminal.
.RE

.B -h
.RS
Show help message and exit.
.RE

This option is context-dependent, and it is designed to provide a quick help on how to use yokotool
or a specific command. The help messages are are agnostic to the power meter type and only contains
general information, common to all the supported power meter types.

.B --version
.RS
Show program's version and exit.
.RE

.B -d
.RS
Print debugging information. Very noisy.
.RE

.B Supported commands
.RS
.B info
.RS
.nf
Print information about the power meter. This command basically prints all the power meter
properties.

.fi
.RE
.RE

.RS
.B read [OPTIONS] ITEMS [-c PROGRAM]
.RS
Read power meter measurement data. ITEMS is the mandatory argument specifying the data items to
read (e.g., \fBP,V,I\fP means power, voltage, and current). To get the full list of supported data
items, run

.nf
$ yokotool read
.fi

By default yokotool keeps reading the data until \fBCtrl-C\fP is pressed (except when integration is
enabled). But you can limit this with the following options.

.B --count
.RS
How many data measurements to read.
.RE

.B --time
.RS
For how long to read the data. Use 'h', 'm', and 's' for 'hours', 'minutes' and 'seconds'. The
default unit is seconds.
.RE

.B --ignore-integration
.RS
Do not stop reading data when integration time is over.
.RE

The output format is CSV. The first line is the CSV header, the following lines are the
comma-separated values, aligned for readability. Use the following options to adjust the output.

.B --no-header
.RS
Do not print the CSV header.
.RE

.B --no-align
.RS
Do not align the CSV columns.
.RE

.B {-o | --outfile} OUTFILE
.RS
Redirect output to 'OUTFILE' instead of the terminal.
.RE

Yokotool can also run an program and read the measurement data until the program exits.
Use the \fB-c\fP option to specify the program. Make sure to have it at the end, because
every argument specified after -c belongs to the program.

.nf
Usage examples:
$ yokotool read I,V,P
Read current, voltage, and active power.

$ yokotool read P --time=1h30m
Keep reading the power for 1 hour and 30 minutes.

$ yokotool read P -c my_script --opt
Execute "my_script --opt" and read power until "my_script" exits.
.fi
.RE
.RE

.RS
.B get PROPERTY
.RS
Get power meter property.

Full list of properties that can be retrieved depends on the power meter model.
To display this list, use \fB--list\fP:
.nf
$ yokotool get --list
.fi

.nf
Usage examples:
$ yokotool <devnode> get interval
Get the data update interval.

$ yokotool <devnode> get current-range
Get the current range.
.fi
.RE
.RE

.RS
.B set PROPERTY VALUE
.RS
Set a property to a value.

Full list of properties that can be modified depends on the power meter model.
To display this list, use \fB--list\fP:

.nf
$ yokotool set --list
.fi

.nf
Usage examples:
$ yokotool set interval 0.1
Set the data update interval to 0.1 second.

$ yokotool set current-range auto
Enable the current auto-range feature.
.fi

Run the "set PROPERTY" command without any value to get the list of allowed values.

.nf
Example:
$ yokotool set current-range
Get the list of allowed current range values.
.fi
.RE
.RE

.RS
.B integration SUBCOMMAND [VALUE]
.RS
This command makes it possible to use the integration power meter feature. For example, this feature
is useful to calculate get watt-hours (Wh) and ampere-hours (Ah). Please, refer to the power meter
usage manual for the details.

You can start, stop (pause) and reset integration with the \fBstart\fP, \fBstop\fP and \fBreset\fP
subcommands.

To wait for integration to finish use the \fBwait\fP subcommand. To set integration mode and timer
use the \fBmode\fP and \fBtimer\fP subcommands.

Use the \fBstate\fP subcommand to get current integration state.

.nf
Usage examples:
$ yokotool integration reset
Reset integration (this is what you want if you do not really care about the integration feature).

$ yokotool integration stop
Stop integration, which actually means to pause it.
.fi
.RE
.RE


.RS
.B calibrate
.RS
Execute zero-level compensation.
.RE
.RE

.RS
.B factory-reset
.RS
Reset to factory settings.
.RE

.B --configure
.RS
In addition to resetting the power meter, configure it with generally reasonable default settings.
This way the initial power meter configuration will be similar across various Yokogawa power meter
flavors.
.RE
.RE

.SH AUTHORS
.nf
Artem Bityutskiy <artem.bityutskiy@linux.intel.com>.
Helia Correia <helia.correia@linux.intel.com>.
.fi


.SH REPORTING BUGS
.nf
GitHub: https://github.com/intel/yoko-tool
Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
.fi
